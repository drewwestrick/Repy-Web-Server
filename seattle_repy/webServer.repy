def transmitOk(sockobj):
	returnHeader = createHTTPHeader('200', 'OK')
	try:
		sockobj.send(returnHeader)
	except:
		print "Transmit Ok Error"

def transmit404(sockobj):
	returnHeader = createHTTPHeader('404','Not found')
	try:
		sockobj.send(returnHeader)
	except:
		print "Transmit 404 Error"

def transmit400(sockobj):
	returnHeader = createHTTPHeader('400','Not found')
	try:
		sockobj.send(returnHeader)
	except:
		print "Transmit 400 Error"

def transmit404Msg(sockobj):
	errHTML = '<img src="404.gif">'
	try:
		sockobj.send(errHTML)
	except:
		print "Transmit Message 404 Error"

def transmit400Msg(sockobj):
	errHTML = '<img src="400.gif">'
	try:
		sockobj.send(errHTML)
	except:
		print "Transmit 400 Message Error"
			
def listdirectory(sockobj):
	try:
		directory = listdir()
		tab5 = '\t\t\t\t\t'
		tab6 = '\t\t\t\t\t\t'
		i = 0
		list = ''
		for file in directory:
			i = i+1
			list += tab5+'<tr>\n'+tab6+'<td>'+str(i)+'</td><td>'
			list += '<a href="'+file+'">'
			list += file
			list += '</a>'
			list += '</td>\n'+tab5+'</tr>\n'
			sockobj.send(list)
			list = ''
	except:
		print "Error List Directory"

def createHTTPHeader(statusCode, statusMsg):
	returnHeader = 'HTTP/1.1 ' + statusCode + ' ' + statusMsg
	returnHeader += '\n\n'
	return returnHeader

def isValidFilename(filename):
	invalidCharacters = ['`','~','!','@','#','$','%','^','*','(',
		')','+','|','\\',']','[','{','}','\'','"',';',':','>',
		'<',',']
	for character in invalidCharacters:
		if character in filename:
			return False
		
	return True

def readTransmit(fileobj,sockobj):
	try:
		payload = ' '
		payload = fileobj.readline()
		sockobj.send(payload)
		while(payload!=''):
			payload = fileobj.readline()
			sockobj.send(payload)
	except:
		print "Transmission Error"

def getFileType(filename):
	fileType = filename.split('.')[1]
	return fileType
def closeConnection(commhandle):
	stopcomm(commhandle)
def serve(ip,port,sockobj, thiscommhandle,listencommhandle):
	#setup 5 second timer to receive valid header
	eventhandle = settimer(5, closeConnection, (thiscommhandle,))
	try:
		httpheader = sockobj.recv(512) # Receive HTTP header
		headerSplit = httpheader.split('\n')
		if headerSplit[-1] == '':
			canceltimer(eventhandle)
		lineZeroFields = headerSplit[0].split(' ')
		filename = lineZeroFields[1].split('/')[1]
	except:
		print "Error in HTTP header"
		closeConnection()
	#favicon check only needed in chrome
	if filename == 'thewall.html':
		try:
			transmitOk(sockobj)
			print "OK!"
			headerHTML = open('header_thewall.html','r')
			formHTML = open('form.html', 'r')
			footerHTML = open('footer.html','r')
			readTransmit(headerHTML,sockobj)
			readTransmit(formHTML, sockobj)
			readTransmit(footerHTML,sockobj)
			headerHTML.close()
			formHTML.close()
			footerHTML.close()
		except:
			print "The Wall Error"
	elif (filename[0:13]=='thewall.html?'):
		try:
			headerHTML = open('header_thewall.html','r')
			formHTML = open('form.html', 'r')
			commentHTML = open('comment.html','a')
			footerHTML = open('footer.html','r')
			fields = (filename[13:len(filename)].split('&'))
			name = comment = (fields[0][5:len(fields[0])]).replace('+',' ')
			comment = (fields[1][8:len(fields[1])]).replace('+',' ').replace('%21','!').replace('%27','\'').replace('%3F','?')
			transmitOk(sockobj)
			commentHTML.write('<div class="bs-callout bs-callout-info"><h4>'+name+'</h4><p>'+comment+'</p></div>\n')
			commentHTML.close()
			readTransmit(headerHTML,sockobj)
			readTransmit(formHTML, sockobj)
			readTransmit(footerHTML,sockobj)
			headerHTML.close()
			formHTML.close()
			footerHTML.close()
		except:
			print "The Wall Posting Error"
	elif filename != 'favicon.ico':
		#check that file requested is a valid file name
		#send Bad Request header and html if invalid
		if not isValidFilename(filename):	
			try:
				transmit400(sockobj)
				headerHTML = open('header_400.html','r')
				footerHTML = open('footer.html','r')
				readTransmit(headerHTML,sockobj)
				transmit400Msg(sockobj)
				readTransmit(footerHTML,sockobj)
				headerHTML.close()
				footerHTML.close()
			except:
				print "Error 404 Page"
		elif filename == '/' or filename == '':
			try:
				transmitOk(sockobj)
				headerHTML = open('header.html','r')
				headerTableHTML = open('header_table.html','r')
				footerHTML = open('footer.html','r')
				footerTableHTML = open('footer_table.html','r')
				readTransmit(headerHTML,sockobj)
				readTransmit(headerTableHTML,sockobj)
				listdirectory(sockobj)
				readTransmit(footerTableHTML,sockobj)
				readTransmit(footerHTML,sockobj)
				headerHTML.close()
				footerHTML.close()
			except:
				print "Failed to send file!"
		else:
			try:
				transmitOk(sockobj)
				sendFile = open(filename,'r')
				readTransmit(sendFile,sockobj)
				sendFile.close()
			except:
				headerHTML = open('header_404.html','r')
				footerHTML = open('footer.html','r')
				readTransmit(headerHTML,sockobj)
				transmit404Msg(sockobj)
				readTransmit(footerHTML,sockobj)
	stopcomm(thiscommhandle)   # close connection with this user
if callfunc == 'initialize':  
	if len(callargs) > 1:
		raise Exception("Too many call arguments")
	elif len(callargs) == 1:
		port = int(callargs[0])
		ip = getmyip()
	else:
		port = 12345
		ip = '127.0.0.1'
	listencommhandle = waitforconn(ip,port,serve) 

  
